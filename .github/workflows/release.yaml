name: Automated Releases with GPG Signing

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
      - 'feature/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (patch/minor)'
        required: true
        default: 'patch'

jobs:
  pip-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Upgrade pip and dependencies
        run: |
          pip install --upgrade pip
          pip install --upgrade -r requirements.txt

          - name: Run Python isort
          run: |
            isort ./src
      - name: Run Python black
        uses: psf/black@stable
        with:
          options: '--check --verbose'
          src: './src'
      - name: Analysing the code with pylint
        run: |
          pylint --rcfile=.pylintrc --load-plugins pylint_pydantic $(git ls-files '**/*.py' | grep -v '^migrations/')
      - name: Set Environment Variables
        run: |
          echo "FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}" >> "$GITHUB_ENV"
          echo "FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}" >> "$GITHUB_ENV"
      - name: Test with pytest
        run: |
          pytest pytests/test_courses.py

      - name: Commit updated dependencies if tests pass
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add requirements.txt
          git commit -m "chore(deps): automated daily pip updates"
          git push origin main
        continue-on-error: true

  release:
    needs: pip-update
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GPG signing
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git config --global user.signingkey "$KEY_ID"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

      - name: Install dependencies
        run: pip install python-semantic-release

      - name: Determine Release Type
        id: determine_version
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
          else
            echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_ENV
          fi

      - name: Run Semantic Release (Signed Tags & Commits)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release version --no-ci --${{ env.RELEASE_TYPE }}

      - name: Publish GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release publish

  Docker-Build-Push:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: milsman2/disc_golf_api:latest
          context: ./
